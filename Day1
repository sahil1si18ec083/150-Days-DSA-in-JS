Question 1
https://leetcode.com/problems/find-pivot-index/
Make a leftsum array that tracks the left side sum of the array elements
Now iterate on the array and calculate the right sum and check if the right sum is equal to the corresponding left sum 
If it is equal then return the index otherwise return -1

/**
 * @param {number[]} nums
 * @return {number}
 */
var pivotIndex = function(nums) {
    // make an arrry that contains the left sum
    let lsum=0;
    const lArray=[];
    let j=0;
    for (let i=0;i<nums.length;i++){
        lArray[j]=lsum;
        lsum=lsum+ nums[i];
        j++;
        
    }
    console.log(lsum)
    console.log(lArray)
    for (let i=0;i<nums.length;i++){
        lsum=lsum-nums[i];
        if(lsum==lArray[i]){
            return i;
        }
    }
    return -1;
    
};



Question 2
https://leetcode.com/problems/3sum-closest/
Given an integer array nums of length n and an integer target, 
find three integers in nums such that the sum is closest to target.
The approach is to keep three pointers one on i, other on i+1 and last one on n-1 
and apply a three sum technique after sorting
Here we need to keeps a track of Modulo of arr[i]+arr[j]+arr[k]- target
When the diffrence is less , then update the difference

var threeSumClosest = function(nums, target)
 {
    const n = nums.length;
    let diff=12129993;
    let result;
    nums.sort((a,b)=>a-b);
    for (let i=0;i<n-2;i++){
        let j=i+1;
        let k=n-1;
        while(k>j){
          
            if(Math.abs(nums[i]+nums[j]+nums[k]-target)<diff){
                diff=Math.abs(nums[i]+nums[j]+nums[k]-target);
                result=nums[i]+nums[j]+nums[k]
            }
            if(nums[i]+nums[j]+nums[k]==target){
                j++;
                k--;
            }
            else if (nums[i]+nums[j]+nums[k]<target){
                j++;


            }
            else{
                k--;
            }
        }
    }
    // console.log(diff)
    return result
    
};


Question 3
Dutch national Flag
It Works on the simple concept that we have two pointers low and high
elements corresponding to the low pointer will be all zeros
Meaning low pointer indicates that the elenments to the left of it will be zeros 
And high pointer indiactes that the elements corresponding to its right will be 2s
Donot call it Alogorithm
It is basic commom sense to keep two pointers
And iterate over the array
If we get a zero, swap the current element with the arr[low] and update the low pointer
If we get a 1 then do not do anything
If we get a 2s, then sap it with arr[high] because the pointer high shows that the elements to its right will be only twos
In this while when we iterate over the array, we will get some low and high values
Elements in left of low will be 0s, and in right of high will be 2s
And 1s will be stuck in the midddle
This is our Intuition which we call as dutch national Flag
https://media.geeksforgeeks.org/wp-content/uploads/20220804131121/5th.png
